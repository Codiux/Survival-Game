#include <TGUI/TGUI.hpp>
#include <SFML/Network.hpp>
#include <string>
#include <iostream>
#include <vector>
#include <cstdlib>

class Projectile : public sf::Drawable {
    public:
        Projectile() {
            //default
        }
        Projectile(int x, int y, sf::Vector2f collisionSize, sf::Vector2i mouse, float speed) {
            pCollisionShape.setPosition(x, y);

            pCollisionShape.setSize(collisionSize);

            pCollisionShape.setOrigin(pCollisionShape.getGlobalBounds().width / 2, pCollisionShape.getGlobalBounds().height / 2);

            float angle = atan2(mouse.y - pCollisionShape.getPosition().x, mouse.x - pCollisionShape.getPosition().y) * 180 / 3.14159;

            pCollisionShape.setRotation(angle);

            sf::Vector2f distance(mouse.x - pCollisionShape.getPosition().x, mouse.y - pCollisionShape.getPosition().y);
            
            float length = sqrt(distance.x * distance.x + distance.y * distance.y);

            velocity = (distance / length) * speed;
        }
        void setSize(sf::Vector2f size) {
            pCollisionShape.setSize(size);
            pCollisionShape.setOrigin(pCollisionShape.getGlobalBounds().width / 2, pCollisionShape.getGlobalBounds().height / 2);
        }
        void setPosition(int x, int y) {
            pCollisionShape.setPosition(x, y);
        }
        void update(float deltaTime) {
            sf::Vector2f amplifiedVelocity = sf::Vector2f(velocity.x, velocity.y);

            pCollisionShape.move(amplifiedVelocity * deltaTime);
        }
    private:
        virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
        {
            target.draw(pCollisionShape, states);
        }
        sf::RectangleShape pCollisionShape;
        sf::Vector2f velocity;
        float speed;
};

class Player : public sf::Drawable {
    public:
        Player() 
        {
            // default..
        }
        Player(int x, int y, sf::Vector2f collisionShapeSize) {
            pCollisionShape.setPosition(x, y);
            pCollisionShape.setSize(collisionShapeSize);
            pCollisionShape.setOrigin(pCollisionShape.getGlobalBounds().width / 2, pCollisionShape.getGlobalBounds().height / 2);
        }
        void setPosition(float x, float y) {
            pCollisionShape.setPosition(x, y);
        }
        sf::Vector2f getPosition() {
            return pCollisionShape.getPosition();
        }
        void move(float x, float y) {
            pCollisionShape.move(x, y);
        }
        void look_at_mouse(sf::Vector2f mouse) {
            float angle = atan2(mouse.y - pCollisionShape.getPosition().x, mouse.x - pCollisionShape.getPosition().y) * 180 / 3.14159;

            pCollisionShape.setRotation(angle);
        }   
    private:
        virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
        {
            target.draw(pCollisionShape, states);
        }
        sf::RectangleShape pCollisionShape;
        sf::Vector2i velocity;
};

int main()
{
    sf::RenderWindow window(sf::VideoMode(1280, 720), "Survival Game");

    window.setFramerateLimit(60);

    sf::Vector2i mouse = sf::Mouse::getPosition(window);

    sf::Vector2f map_size(window.getSize().x, window.getSize().y);
    
    std::vector<Projectile> bulletVec;
    
    Player player(window.getSize().x / 2, window.getSize().x / 2, sf::Vector2f(50, 50));
    float playerSpeed = 200;
    

    sf::Clock clock;
    while(window.isOpen()) {
        float deltaTime = clock.restart().asSeconds();

        sf::Event event;
        while(window.pollEvent(event)) {
            switch(event.type) {
                case sf::Event::Closed:
                    window.close();
                    break;

                case sf::Event::MouseMoved:
                    mouse = sf::Mouse::getPosition(window);
                    
                    break;

                case sf::Event::MouseButtonPressed:
                    if(event.mouseButton.button == sf::Mouse::Left) {
                        Projectile newProjectile(player.getPosition().x, player.getPosition().y, sf::Vector2f(30, 10), mouse, 1000);
                        bulletVec.push_back(newProjectile);
                        std::cout << bulletVec.size() << std::endl;
                    }
            }
        }


        ///////////// PLAYER MOVEMENTS ////////////////////
        player.look_at_mouse(sf::Vector2f(mouse.x, mouse.y));

        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
		{
			player.move(0.f, -playerSpeed * deltaTime);
		}
		if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
		{
			player.move(0.f, playerSpeed * deltaTime);
		}
		if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
		{
			player.move(-playerSpeed * deltaTime, 0.f);
		}
        if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
		{
			player.move(playerSpeed * deltaTime, 0.f);
		}

        //////////////// UPDATE BULLET ////////////////
        for(int i  = 0; i < bulletVec.size(); i++) {
            bulletVec[i].update(deltaTime);
        }

        
        window.clear();

        for(int i = 0; i < bulletVec.size(); i++) {
            window.draw(bulletVec[i]);
        }
        
        window.draw(player);

        window.display();
    }


    return EXIT_SUCCESS;
}
